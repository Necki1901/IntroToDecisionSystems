@page "/tspsolver"
@inject HttpClient Http

<h1>Willkommen</h1>

@if (specs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <label>
        TSP specification:
        <select class="form-control">
            @foreach(var spec in specs)
            {
                <option>@spec.Name</option>
            }
        </select>
    </label>
}

@code {
    TSPSpec[] specs;

    protected override async Task OnInitializedAsync()
    {
        var serverspecs = await Http.GetJsonAsync<SerializableTSPSpec[]>("sample-data/tspspecs.json");
        Console.WriteLine($"{string.Join(Environment.NewLine, (IEnumerable<SerializableTSPSpec>)serverspecs)}");
        specs = serverspecs
            .Select(SerializableTSPSpec.ToDomain)
            .OrderBy(spec => spec.Cities.Count)
            .ToArray();
    }

    public class SerializableTSPSpec
    {
        public string Name { get; set; }

        public int[] OptimalTour { get; set; }

        public SerializableLocation[] Cities { get; set; }

        public static TSPSpec ToDomain(SerializableTSPSpec spec)
        {
            return new TSPSpec(
                spec.Name,
                spec.OptimalTour,
                spec.Cities.Select(SerializableLocation.ToDomain).ToList());
        }

        public override string ToString()
        {
            var coordinates = string.Join(", ", (IEnumerable<SerializableLocation>)Cities);
            return $"{Name} ({Cities.Length} cities): ({coordinates})";
        }
    }

    public class SerializableLocation
    {
        public double X { get; set; }
        public double Y { get; set; }

        public override string ToString()
        {
            return $"({X}, {Y})";
        }

        public static Location ToDomain(SerializableLocation location)
        {
            return new Location(location.X, location.Y);
        }
    }
}